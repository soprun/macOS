#!/bin/bash

# shellcheck source=./shell-common
#source "shell-common"

#function _date_time() {
#    date +"%Y/%m/%d %H:%M:%S"
#}

#function _utc_date_time() {
#    date -u +"%Y/%m/%dT%H:%M:%SZ"
#}

# log() {
#   echo "$@"
#   logger -p user.notice -t $SCRIPT_NAME "$@"
# }

# err() {
#   echo "$@" >&2
#   logger -p user.error -t $SCRIPT_NAME "$@"
# }

# log "writing to stdout"
# err "writing to stderr"

#######################################################################
#                           logger                                    #
#######################################################################

## https://apple.stackexchange.com/questions/256769/how-to-use-logger-command-on-sierra

readonly SCRIPT_NAME="$(basename $0)"

log_info()
{
  printf "\033[0;34m[info]\033[0m: %s\\n" "$1"
  logger -p user.info -t "$SCRIPT_NAME" "$@"
}

log_success()
{
  printf "\033[0;32m[success]\033[0m: %s\\n" "$1"
  logger -p user.notice -t "$SCRIPT_NAME" "$@"
}

log_warn()
{
  printf "\033[0;33m[warn]\033[0m: %s\\n" "$1"
  logger -p user.warn -t "$SCRIPT_NAME" "$@"
}

log_alert()
{
  printf "\033[0;33m[alert]\033[0m: %s\\n" "$1"
  logger -p user.alert -t "$SCRIPT_NAME" "$@"
}

log_error()
{
  printf "\033[0;31m[error]\033[0m: %s\\n" "$1"
  logger -p user.error -t "$SCRIPT_NAME" "$@"
}

error_exit()
{
  log_error "$1" >&2
  exit 1
}
