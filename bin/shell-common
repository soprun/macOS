#!/usr/bin/env bash

# shellcheck disable=SC2034

# https://ru.wikipedia.org/wiki//dev/null
# https://ru.wikipedia.org/wiki/Chmod

#######################################################################
# Shell very strict mode
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
#######################################################################

# Allow commands to fail silently
set +e

# Allow access undefined variables
set +u

# Return the status of the last command in a pipe even if
# an earlier command fails
set +o pipefail

#set -euo pipefail
shopt -s extdebug

# Text reset attributes
tput sgr0

# Save screen
# tput smcup # switch to secondary screen
# tput rmcup # switch back to primary screen

# Define default values
declare -i debug=0
declare -i verbose=0
declare -i help=0
declare -i quiet=0
declare USAGE

for i in "$@"; do
  case "$i" in
  -v | --verbose)
    shift
    declare -ir verbose=1
    ;;
  -vv)
    shift
    declare -ir verbose=2
    ;;
  -vvv)
    shift
    declare -ir verbose=3
    ;;
  -v=* | --verbose=*)
    shift
    name=${i#--}
    declare -ir verbose=${name#*=}
    ;;
  --debug)
    shift
    declare -ir debug=1
    ;;
  --help)
    shift
    declare -ir help=1
    ;;
  --quiet)
    shift
    declare -ir quiet=1
    ;;
  esac
done

if [ $verbose -ne 0 ]; then
  echo -e "\033[0;33m[warning] Verbose mode on! level=${verbose} \033[0m\n"

  if [ $debug -eq 0 ]; then
    # Enable debug when verbose!
    declare -ir debug=1
  fi

  if [ $verbose -gt 1 ]; then
    # echo -e "\033[0;33m[warning] Verbose: print commands and their arguments as they are executed.\033[0m\n"
    set -x
  fi
  if [ $verbose -gt 2 ]; then
    # Set xtrace and verbose mode.
    set -v
  fi
fi

if [ "${debug}" -eq 0 ]; then
  if [ "${SHELL_DEBUG}" == 1 ] || [ "${SHELL_DEBUG}" == true ]; then
    # Enable debug when verbose!
    declare -ir debug=1
  fi
fi

if [ "${debug}" -ne 0 ]; then
  echo -e "\033[0;33m[warning] Debug mode on!\033[0m\n\n"
  set +x
  #  set -T
  set -o functrace
fi

# todo: Ask for the administrator password upfront
#sudo -v

#export DEFAULT_PROJECT_PATH="$(pwd)"
#IDE_BIN_HOME="${0%/*}"
#exec "$IDE_BIN_HOME/../MacOS/phpstorm" inspect "$@"

SOURCE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
SOURCE_SCRIPT="$(basename $0)"

#######################################################################
# Load environment variables
#######################################################################

for file in ${HOME}/.{env,env.local}; do
  # shellcheck source=../.env
  [ -r "$file" ] && [ -f "$file" ] && source "$file" && unset file
done

readonly COLOR_RESET='\033[0m' # Text Reset

# Regular Colors
readonly COLOR_BLACK="\033[0;30m"  # Black
readonly COLOR_RED="\033[0;31m"    # Red
readonly COLOR_GREEN="\033[0;32m"  # Green
readonly COLOR_YELLOW="\033[0;33m" # Yellow
readonly COLOR_BLUE="\033[0;34m"   # Blue
readonly COLOR_PURPLE="\033[0;35m" # Purple
readonly COLOR_CYAN="\033[0;36m"   # Cyan
readonly COLOR_WHITE="\033[0;37m"  # White

# Background
readonly BG_BLACK="\033[40m"  # Black
readonly BG_RED="\033[41m"    # Red
readonly BG_GREEN="\033[42m"  # Green
readonly BG_YELLOW="\033[43m" # Yellow
readonly BG_BLUE="\033[44m"   # Blue
readonly BG_PURPLE="\033[45m" # Purple
readonly BG_CYAN="\033[46m"   # Cyan
readonly BG_WHITE="\033[47m"  # White

## Reset text format to the terminal's default
readonly text_reset=$(tput sgr0)

#COLUMNS=`tput cols`
#export COLUMNS # Get screen width.
#COLUMNS=$(tput cols)
#LINES=$(tput lines)

## Text mode commands
# see: https://misc.flogisoft.com/bash/tip_colors_and_formatting

readonly text_bold=$(tput bold)      # Select bold mode
readonly text_half=$(tput dim)       # Select dim (half-bright) mode
readonly text_underline=$(tput smul) # Enable underline mode
#tput rmul    # Disable underline mode
#tput rev     # Turn on reverse video mode
#tput smso    # Enter standout (bold) mode
#tput rmso    # Exit standout mode

## Set the foreground colour using ANSI escape
readonly color_black=$(tput setaf 0)
readonly color_red=$(tput setaf 1)
readonly color_green=$(tput setaf 2)
readonly color_yellow=$(tput setaf 3)
readonly color_blue=$(tput setaf 4)
readonly color_magenta=$(tput setaf 5)
readonly color_cyan=$(tput setaf 6)
readonly color_white=$(tput setaf 7)

## Set the background colour using ANSI escape
readonly bg_color_black=$(tput setab 0)
readonly bg_color_red=$(tput setab 1)
readonly bg_color_green=$(tput setab 2)
readonly bg_color_yellow=$(tput setab 3)
readonly bg_color_blue=$(tput setab 4)
readonly bg_color_magenta=$(tput setab 5)
readonly bg_color_cyan=$(tput setab 6)
readonly bg_color_white=$(tput setab 7)

function if_boolean() {
  local var="${1:-}"

  if [ "${var}" == 1 ] || [ "${var}" == true ] || [ "${var}" == 1 ]; then
    echo true
    return
  fi

  echo false
}

function line_break() {
  local -r text=${1:-}
  printf "\r%s%s${text_reset}\n" "${text}" "$(printf "%*s" "$(($(tput cols) - ${#text}))" '' | tr ' ' -)"
}

# USAGE:
function output {
  local text="${1:-}"
  local text_color="${text_reset}"

  local label="${2:-}"
  local label_color
  local label_line

  local logger_priority="user.info"

  case "${label}" in
  "debug")
    label_color="$(tput setaf 8)"
    text_color="$(tput setaf 7)"
    logger_priority='user.debug'
    ;;
  "success")
    label_color="${color_green}"
    logger_priority='user.success'
    ;;
  "info")
    label_color="${color_blue}"
    logger_priority='user.info'
    ;;
  "notice" | "alert")
    label_color="${color_blue}"
    logger_priority='user.notice'
    ;;
  "warn" | "warning")
    label_color="${color_yellow}"
    logger_priority='user.warn'
    ;;
  "heading" | "header" | "title")
    text_color="\033[44m${text_bold}${text_half}"
    unset label
    ;;
  "error")
    label_color="${color_red}"
    logger_priority='user.error'
    ;;
  "line")
    label_line=true
    label_color="$(tput setaf 250)"
    text_color="${color_blue}"
    ;;
  *)
    unset label
    ;;
  esac

  local script_name
  script_name="$(basename "${0}")"
  script_name="${script_name%.*}"

  logger -tag "${script_name}" -logger_priority "${logger_priority}" "${text}"

  if [ "${label}" == "debug" ]; then
    if [ "${debug}" -eq 0 ]; then
      return
    fi
  fi

  sleep .1

  if [ -n "${label}" ]; then
    label="${label_color}[${label}]: "
  fi

  if [ -n "${label_line}" ]; then
    printf "\n%s\n\n" "$(line_break "${label_color}--- [ ${text_color}${text}${text_reset}${label_color} ] ")"
    return
  fi

  if [ "${debug}" -eq 1 ] || [ $verbose -ne 0 ]; then
    # text="${color_yellow}${BASH_SOURCE[0]} ($$): ${text_color}${text}"
    text="${color_yellow}${script_name} ($$): ${text_color}${text}"
  fi

  printf "${text_reset}%s${text_reset}${text_color}%s${text_reset}\n" "${label}" "${text}" >&2

  # The separator is a line break at the end.
  if [ "$(if_boolean "${3:-false}")" = true ]; then
    printf "${text_color}%s${text_reset}\n" "$(line_break)"
  fi
}

# Examples:
#output 'Plan text..'
#output "Heading text.." "heading"
# Prints the horizontal line separator;
#output "Plan text.." "text" true
#output "Plan text" "debug"
#output "Plan text" "text"
#output "Plan text" "info" true
#output "Plan text" "line"
#output 'Debug message...' 'debug'
#output "Success message..." "success"
#output "Info message..." "info"
#output "Notification message..." "notice"
#output "Warning message..." "warning"
#output "Error message..." "error"
#
#exit 1

function error_exit() {
  output "$*" "error" >&2
  exit 1
}

# complain to STDERR and exit with error
function die() {
  echo "$*" >&2
  exit 2
}

# Return: [info]: shell-common:source[179]
function debug() {
  local script_name
  script_name="$(basename "${0}")"
  script_name="${script_name%.*}"

  local output
  output="${BASH_SOURCE[1]##*/}:${FUNCNAME[1]}[${BASH_LINENO[0]}]"

  logger -tag "${script_name}" -priority 'user.debug' "${output}"
  output "${output}" 'info' >/dev/tty
}

function command_exists() {
  command -v "$@" >/dev/null 2>&1
}

function command_eval() {
  # "$@" >/dev/null 2>&1
  # eval "$@" >/dev/null 2>&1
  # output "$(eval "$@" >/dev/null)" 'info' 2>&1

  output "command: \"$*\"" 'info'

  local output
  output=$(eval "$@" 2>&1)

  #  local output
  #  output="$(eval "$*" 2>&2 | tee)"
  #
  #    echo "output: $output"
  #  echo "output: $output >/dev/null"
  #  output "$(eval "$*" >/dev/null)" 'info' 2>&1
  #  output "" 'info' 2>&1

  # output "$output" 'warn'
}

# Usage Example
#commland_exists docker || {
#  log_error "Command 'docker' is not installed."
#}

# backup_file "${HOME}/.ssh/config" true
function backup_file() {
  local source_file ignore target_file

  source_file="${1}"
  ignore="$(if_boolean "${2}")"
  target_file="${source_file}.backup-$(date +%Y-%m-%dT%H:%M:%S%z)"

  if [ -L "${source_file}" ]; then
    if [ "${ignore}" == true ]; then
      output "FILE ${source_file} exists and is a symbolic link." "warn"
      return
    fi

    error_exit "FILE ${source_file} exists and is a symbolic link."
  fi

  if [ ! -f "${source_file}" ]; then
    if [ "${ignore}" == true ]; then
      output "Ignore if it doesn't exist ${source_file}" "warn"
      return
    fi

    error_exit "File ${source_file} is not exists." "warn"
  fi

  # copy files
  cp "${source_file}" "${target_file}"
  output "The backup file was created in ${target_file}." "success"
}

#######################################################################
# Check environment variables
#######################################################################

if [ -z "${SHELL_DEBUG}" ]; then
  error_exit "An error occurred, the value of the variable SHELL_DEBUG was not loaded!"
fi

if [ -z "${SHELL_HOME}" ]; then
  error_exit "An error occurred, the value of the variable SHELL_HOME was not loaded!"
fi

if [ "$(if_boolean "${SHELL_DEBUG}")" = true ]; then
  output 'Debug mode is enabled!' 'warning'
fi

if [ "$(if_boolean "${SHELL_DEBUG}")" = true ]; then
  output 'The shell-common was installed successfully!' 'success'
fi

# shellcheck source=./shell-date
source "${SOURCE_DIR}/shell-date"

# shellcheck source=./shell-read-boolean
source "${SOURCE_DIR}/shell-read-boolean"

# type -a realpath
# realpath is a function
realpath() {
  f=$@
  if [ -d "$f" ]; then
    base=""
    dir="$f"
  else
    base="/$(basename "$f")"
    dir=$(dirname "$f")
  fi
  dir=$(cd "$dir" && /bin/pwd)
  echo "$dir$base"
}

function_exists() {
  declare -f -F $1 >/dev/null
  return $?
}

# Usage Example
# function_exists function_name && echo Exists || echo No such function

#######################################################################
# Launch scripts...
#######################################################################

# USAGE="${color_magenta}$(basename $0)${text_reset} ${color_yellow}[warning]${text_reset}: arguments and options are not filled in"

#USAGE_DEFAULT_COMMAND=$(printf  "")

# ${color_yellow}[warning]${text_reset}: arguments and options are not filled in

function_exists usage_option_title || {
  # shellcheck source=./shell-usage
  source "${SOURCE_DIR}/shell-usage"
}

if [ -z "${USAGE_COMMAND_OPTIONS}" ]; then
  USAGE_COMMAND_OPTIONS="options"
fi

if [ -z "${USAGE_COMMAND}" ]; then
  USAGE_COMMAND="$(usage_option_line "${color_blue}$(basename "$0")" "[${USAGE_COMMAND_OPTIONS}] [arguments]")"
fi

USAGE="
$(usage_option_title "Usage")
${USAGE_COMMAND}

$(usage_option_title "Options (shell-common)")
$(usage_option_line "--help" "Display this help message")
$(usage_option_line "--quiet" "Do not output any message")
$(usage_option_line "--debug" "Switches on debug mode.")
$(usage_option_line "--version" "Display this application version")
$(usage_option_line "-v|vv|vvv, --verbose" "Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug")
"

if [ -n "${USAGE_ARGUMENTS}" ]; then
  USAGE+="
$(usage_option_title "Usage arguments")
${USAGE_ARGUMENTS}
"
fi

if [ -n "${USAGE_OPTIONS}" ]; then
  output "USAGE_OPTIONS: ${USAGE_OPTIONS}" "debug"
  USAGE+="
$(usage_option_title "Options ($(basename $0))")
${USAGE_OPTIONS}
"
fi

if [ $help -ne 0 ]; then
  if [ -z "${USAGE}" ]; then
    output "The global variable ${color_green}USAGE${text_reset} is empty!" "error"
  else
    output "${USAGE}"
  fi
  exit 0
fi
