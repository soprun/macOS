#!/usr/bin/env bash

# shellcheck disable=SC2034

#######################################################################
# Shell very strict mode
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
#######################################################################

set -e

#
# todo: Ask for the administrator password upfront
#sudo -v

#export DEFAULT_PROJECT_PATH="$(pwd)"
#IDE_BIN_HOME="${0%/*}"
#exec "$IDE_BIN_HOME/../MacOS/phpstorm" inspect "$@"

#######################################################################
# Load environment variables
#######################################################################

for file in ${HOME}/.{env,env.local}; do
  # shellcheck source=../.env
  [ -r "$file" ] && [ -f "$file" ] && source "$file"
done
unset file

readonly COLOR_RESET='\033[0m' # Text Reset

# Regular Colors
readonly COLOR_BLACK="\033[0;30m"  # Black
readonly COLOR_RED="\033[0;31m"    # Red
readonly COLOR_GREEN="\033[0;32m"  # Green
readonly COLOR_YELLOW="\033[0;33m" # Yellow
readonly COLOR_BLUE="\033[0;34m"   # Blue
readonly COLOR_PURPLE="\033[0;35m" # Purple
readonly COLOR_CYAN="\033[0;36m"   # Cyan
readonly COLOR_WHITE="\033[0;37m"  # White

# Background
readonly BG_BLACK="\033[40m"  # Black
readonly BG_RED="\033[41m"    # Red
readonly BG_GREEN="\033[42m"  # Green
readonly BG_YELLOW="\033[43m" # Yellow
readonly BG_BLUE="\033[44m"   # Blue
readonly BG_PURPLE="\033[45m" # Purple
readonly BG_CYAN="\033[46m"   # Cyan
readonly BG_WHITE="\033[47m"  # White

function if_boolean()
{
  local var="${1:-}"

  if [ "${var}" == true ] || [ "${var}" == 1 ]; then
    echo true
  else
    echo false
  fi
}

function output
{
  local priority='user.info'
  local label
  local label_color="${COLOR_RESET}"
  local message="${1}"
  local message_color="${COLOR_RESET}"
  local type="${2:-}"

  local enable_message enable_message_color
  enable_message="$(if_boolean "${SHELL_ENABLE_MESSAGE}")"
  enable_message_color="$(if_boolean "${SHELL_ENABLE_MESSAGE_COLOR}")"

  local enable_label enable_label_color enable_label_uppercase
  enable_label="$(if_boolean "${SHELL_ENABLE_LABEL}")"
  enable_label_color="$(if_boolean "${SHELL_ENABLE_LABEL_COLOR}")"
  enable_label_uppercase="$(if_boolean "${SHELL_ENABLE_LABEL_UPPERCASE}")"

  if [ "${type}" != "" ]; then
    case "${type}" in
    "debug")
      enable_label=false
      enable_message=false
      priority='user.debug'
      ;;
    "success")
      message_color="${COLOR_GREEN}"
      ;;
      # Собирает информацию, которая полезна, но не важна для устранения проблем.
    "info")
      message_color="${COLOR_BLUE}"
      priority='user.info'
      ;;
      # Собирает информацию, необходимую для устранения неполадок. Например, запишите информацию, которая может привести к сбою.
    "notice")
      message_color="${COLOR_BLUE}"
      priority='user.notice'
      ;;
      # Собирает информацию о сбоях и ошибках в вашем коде. Если объект действия существует, система собирает информацию для связанной цепочки процессов.
    "warn" | "warning")
      message_color="${COLOR_YELLOW}"
      priority='user.warn'
      ;;
      # Захватывает ошибки, замеченные во время выполнения вашего кода. Если объект действия существует, система собирает информацию для связанной цепочки процессов.
    "error")
      message_color="${COLOR_RED}"
      priority='user.error'
      ;;
    "heading")
      enable_label=false
      enable_message_color=true
      message_color="\033[1;39m"
      ;;
    esac

    label="[${type}]: "
    label_color="${message_color}"
  fi

  local script_name
  script_name="$(basename "${0}")"
  script_name="${script_name%.*}"

  logger -tag "${script_name}" -priority "${priority}" "${message}"

  if [ "${enable_message}" == false ]; then
    return
  fi

  if [ "${enable_message_color}" == false ]; then
    unset message_color
  fi

  if [ "${enable_label_color}" == false ]; then
    unset label_color
  fi

  if [ "${enable_label_uppercase}" == true ]; then
    label="$(printf '%s\n' "$label" | awk '{ print toupper($0) }')"
  fi

  if [ "${enable_label}" == false ]; then
    unset label label_color
  fi

  echo -e "${label_color}${label}${COLOR_RESET}${message_color}${message}${COLOR_RESET}"
}

error_exit()
{
  output "$1" "error" >&2
  exit 1
}

#output 'Plan text..'
#output "Heading text.." "heading"
#
#output 'Debug message...' 'debug'
#output "Success message..." "success"
#output "Info message..." "info"
#output "Notification message..." "notice"
#output "Warning message..." "warning"
#output "Error message..." "error"
#
#exit 1

#######################################################################
# Check environment variables
#######################################################################

if [ -z "${SHELL_DEBUG}" ]; then
  error_exit "An error occurred, the value of the variable SHELL_DEBUG was not loaded!"
fi

if [ -z "${SHELL_BIN}" ]; then
  error_exit "An error occurred, the value of the variable SHELL_BIN was not loaded!"
fi

if [ "$(if_boolean "${SHELL_DEBUG}")" = true ]; then
  output 'Debug mode is enabled!' 'warning'
fi

if [ "$(if_boolean "${SHELL_DEBUG}")" = true ]; then
  output 'The shell-common was installed successfully!' 'success'
fi
