#!/bin/bash

set -e

# shellcheck disable=SC1091
# shellcheck source=../shell-common
source "${SHELL_HOME}/shell-common"

if [ "$(git config --global --get user.name)" != "$GIT_NAME" ]; then
  error_exit "An error occurred, the user.name parameter does not match the identity."
fi

if [ "$(git config --global --get user.email)" != "$GIT_EMAIL" ]; then
  error_exit "An error occurred, the user.email parameter does not match the identity."
fi

if [ "$(git config --global --get commit.gpgsign)" != "$GIT_GPG_SIGN" ]; then
  error_exit "An error occurred, the gpgsign parameter does not match the identity."
fi

# Record changes to the repository
# commit_message="Signing commit $(date +%Y-%m-%dT%H:%M:%S%z)"
commit_message="Signing commit $(date +%d-%m-%Y)"
commit_push=false
commit_branch=$(git rev-parse --abbrev-ref HEAD) >/dev/null 2>/dev/null

declare -i interactive=1

# Getops does not support long option names
while [[ $# -gt 0 ]]; do
  case $1 in
  -m=* | --message=*)
    commit_message="${1#*=}"
    shift # past value
    ;;
  -p | --push)
    commit_push=true
    shift # past value
    ;;
  --no-interactive)
    interactive=0
    shift # past value
    ;;
  *)
    output "Unknown option $1" "error"
    output "Usage: ${0} [-m|--message=\"commit...\" --push]" "error"
    exit 1
    ;;
  esac
done

if [ -z "$commit_message" ]; then
  output "Commit message empty!" "error"
fi

# echo $commit_message
# echo $commit_push

output "$(printf "Name:\t $COLOR_BLUE%s$COLOR_RESET" "$GIT_NAME")" "info"
output "$(printf "Email:\t $COLOR_BLUE%s$COLOR_RESET" "$GIT_EMAIL")" "info"
output "$(printf "GPG key: $COLOR_YELLOW%s$COLOR_RESET" "$GIT_GPG_KEY")" "info"
output "$(printf "Branch:\t $COLOR_CYAN%s$COLOR_RESET 📝" "$commit_branch")" "info"
output "$(printf "Commit:\t $COLOR_CYAN%s$COLOR_RESET 📝" "$commit_message")" "info"

output $commit_push

if [ "$interactive" -eq 0 ]; then
  if ! git commit -S --all --message "$commit_message" >/dev/null 2>/dev/null; then
    output "An error occurred when record changes" 'error'
  fi
fi

exit 0

read_boolean "Commit changes?" true || {
  if ! git commit -S --all --message "$commit_message" >/dev/null 2>/dev/null; then
    output "An error occurred when record changes" 'error'
  else
    output "Commit id: $(git rev-parse --short HEAD)" "success"
    output "Commit sha: $(git rev-parse HEAD)" "success"
    # output "https://github.com/soprun/docker-project/commit/$(git rev-parse HEAD)" "success"
  fi

  # Pushes your local commits to the remote repository
  read_boolean "Push to the repository?" true || {
    if ! git push origin --follow-tags >/dev/null 2>/dev/null; then
      output "An error occurred when pushing" "warn"
    fi
  }
}
