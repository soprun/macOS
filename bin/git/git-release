#!/bin/bash

# https://gist.github.com/rponte/fdc0724dd984088606b0

# shellcheck source=../shell-common
source "${SHELL_BIN}/shell-common"

USAGE='USAGE: git-release LEVEL [-p] [-h]'
HELP="$USAGE
Increment git tag using given increment level.
Positional arguments:
    LEVEL       : 'M' for major, 'm' for minor or 'b' for bug.
Flags:
    -h --help   : Show help and exit.
    -p --preview: Dry run to show new tag label and not actually create it.
"

if [[ "$#" -eq 0 ]] || [[ "$1" == '-h' ]] || [[ "$1" == '--help' ]]; then
    echo "$HELP"
    exit 1
fi

LEVEL_CHOICE=$1

if [[ "$2" ]]; then
    if [[ "$2" == '-p' ]] || [[ "$2" == '--preview' ]]; then
        PREVIEW=true
    else
        log_error "Invalid arguments: \"$*\""
        log_warn "$USAGE"
        exit 1
    fi
else
    PREVIEW=false
fi

log_info "=> Fetching tags... "

if ! git fetch --tags >/dev/null 2>/dev/null; then
    error_exit "An error occurred while fetching the last tag!"
fi

# Get latest tag name
last_tag="$(git describe --tags $(git rev-list --tags --max-count=1))"
last_tag="${last_tag/v/}"

log_info "$(printf "Current tag:$COLOR_BLUE v%s$COLOR_RESET" "$last_tag")"

# Replace dot with space then split into array.
last_tag_arr=(${last_tag//./ })

major=${last_tag_arr[0]}
minor=${last_tag_arr[1]}
bug=${last_tag_arr[2]}

case "$LEVEL_CHOICE" in
"major")
    ((major += 1))
    minor=0
    bug=0
    ;;
"m")
    ((minor += 1))
    bug=0
    ;;
"b")
    ((bug += 1))
    ;;
*)
    log_error "Invalid arguments: \"$*\""
    log_warn "$USAGE"
    exit 1
    ;;
esac

release_tag="v$major.$minor.$bug"

log_success "$(printf "Release tag:$COLOR_GREEN %s$COLOR_RESET ✅" "$release_tag")"

# printf "Release title:\t%s\n" "Release title ...$(date +"%Y/%m/%d %H:%M:%S")"
# printf "Release date:\t%s\n" "$(date +"%Y/%m/%d %H:%M:%S")"
# printf "Release author:\t%s\n" "$(git config --get user.name)"
# printf "Release email:\t%s\n" "$(git config --get user.email)"

if [[ "$PREVIEW" == true ]]; then
    log_info 'Skipping tag creation'
else
    git tag --sign --annotate "$release_tag" --message "$release_tag"
    log_success "Create annotated tag..."

    if ! git verify-tag "$release_tag" >/dev/null 2>/dev/null; then
        log_warn "An error occurred while verify tags"
    fi
fi

read -r -p "Push all tags: $tag_name? [y/N] " git_push

if [[ "$git_push" =~ ^([yY][eE][sS]|[yY])$ ]]; then
    log_info "Push tag: $release_tag"
    
    if ! git push origin --tags >/dev/null 2>/dev/null; then
        log_warn "An error occurred while pushing tags"
    fi
fi

# if ! git fetch --tags >/dev/null 2>/dev/null; then
#     error_exit "An error occurred while fetching the last tag!"
# fi

# Checkout latest tag
# git checkout $latestTag

# https://git-scm.com/docs/git-ls-remote
# Отображает ссылки, доступные в удаленном репозитории, вместе с соответствующими идентификаторами фиксации.
# git ls-remote --tags --refs ./refs/tags/

# Most recent by date
# git tag --sort=committerdate | tail -1

# Largest version number (assuming ALL your tags are numbered... see below)
# git tag | sort -V

# echo $(git tag --sort=committerdate --list '[0-9]*')

# git tag --sort=v:refname | tail -1

# git describe --tags $(git rev-list --tags --max-count=1)

# todo: botton  Publish release ??
