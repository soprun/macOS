#!/bin/bash

#verbose=no
#debug=no
#flist=""
#
#set -- $(getopt abf: "$@")
#
#while [ $# -gt 0 ]
#do
#    case "$1" in
#    (-v) is_verbose=yes;;
#    (-d) is_debug=yes;;
#    (-f) flist="$flist $2"; shift;;
#    (--) shift; break;;
#    (-*) echo "$0: error - unrecognized option $1" 1>&2; exit 1;;
#    (*)  break;;
#    esac
#    shift
#done
#
#echo "is_debug: $is_debug"
#echo "is_verbose: $is_verbose"

#if [ -z "$1" ]
#then
#  echo "Usage: `basename $0` find-string"
#  exit $E_NOPARAMS
#fi

#debecho () {
#  if [ ! -z "$DEBUG" ]; then
#     echo "$1" >&2
#     #         ^^^ to stderr
#  fi
#}
#
#DEBUG=on
#Whatever=whatnot
#debecho $Whatever   # whatnot
#
#DEBUG=
#Whatever=notwhat
#debecho $Whatever   # (Will not echo.)

# Invoke this script with bash. It doesn't work with sh.

interval=1
#long_interval=10
#
#{
#     trap "exit" SIGUSR1
#     sleep $interval; sleep $interval
#     while true
#     do
#       echo -n '.'     # Use dots.
#       sleep $interval
#     done; } &         # Start a progress bar as a background process.
#
#pid=$!
#trap "echo !; kill -USR1 $pid; wait $pid"  EXIT        # To handle ^C.
#
#echo -n 'Long-running process '
#sleep $long_interval
#echo ' Finished!'
#
#kill -USR1 $pid
#wait $pid              # Stop the progress bar.
#trap EXIT
#
#exit $?

#usage() {
#  echo Usage...
#}
#
#while getopts "h,v,verbose,debug" opt; do
#  case $opt in
#    v | verbose) verbose=1;;
#    debug) debug=1;;
#    \?) ;;
#  esac
#done
#
#$verbose && echo "Verbose mode on" || echo "Verbose mode off"
#$debug && echo "debug mode on" || echo "debug mode off"

#if ((verbose)); then
#  echo "Searching for a familiar package manager..."
#fi
#
# or
#((verbose)) && echo "Searching for a familiar package manager..."

#if [ $# -lt 1 ]; then
#  echo "No options found!"
#  exit 1
#fi
#
#while getopts "a:b" opt; do
#  case $opt in
#  a)
#    echo "Found option $opt"
#    echo "Found argument for option $opt - $OPTARG"
#    ;;
#  b) echo "Found option $opt" ;;
#  *) echo "No reasonable options found!" ;;
#  esac
#done

# Short summary description of your program.

# Copyright 2008 Bob Proulx <bob@proulx.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Longer description here as needed.
#
# Examples:
#
#   progname arg1
#   progname --verbose arg1 arg2

#progname=$(basename $0)
#version=@VERSION@

print_usage() {
  # This script is designed to use help2man to build the man page
  # directly from the script itself.
  #   help2man programname
  # Check the man page formatting after making changes here.
  cat <<'EOF'
Description of script goes here.

This is both your man page when run through help2man and your online
help.  Document your program here.

Usage: programname [options]

Options:
 -v, --verbose      verbose operation
 -n, --dry-run      not really, just print what would be done
     --help         print this help message
     --version      print program version

Examples:

  $ programname --help

  $ programname --verbose --dry-run

  $ programname arg1 arg2

Report bugs to <bug-address@example.com>.
EOF
}

print_version() {
  echo "$progname $version"
  echo "Copyright (C) 2008 Your Name <you@example.com>."
  echo "License GPLv3+: GNU GPL version 3 or later"
  echo "<http://gnu.org/licenses/gpl.html>"
  echo "This is free software: you are free to change and redistribute it."
  echo "There is NO WARRANTY, to the extent permitted by law."
  echo ""
  echo "Written by Your Name <you@example.com>."
}

SHORTOPTS="dmnv"
LONGOPTS="daily,monthly,help,verbose,version"

if
  $(getopt -T >/dev/null 2>&1)
  [ $? = 4 ]
then # New longopts getopt.
  OPTS=$(getopt -o $SHORTOPTS --long $LONGOPTS -n "$progname" -- "$@")
else # Old classic getopt.
  # Special handling for --help and --version on old getopt.
  case $1 in --help)
    print_usage
    exit 0
    ;;
  esac
  case $1 in --version)
    print_version
    exit 0
    ;;
  esac
  OPTS=$(getopt $SHORTOPTS "$@")
fi

if [ $? -ne 0 ]; then
  echo "'$progname --help' for more information" 1>&2
  exit 1
fi

eval set -- "$OPTS"

daily=false
monthly=false
verbose=false
while [ $# -gt 0 ]; do
  : debug: $1
  case $1 in
  -d | --daily)
    daily=true
    shift
    ;;
  -m | --monthly)
    monthly=true
    shift
    ;;
  --help)
    print_usage
    exit 0
    ;;
  -n | --dry-run)
    notreally=true
    shift
    ;;
  --quiet)
    quiet=true
    shift
    ;;
  -v | --verbose)
    verbose=true
    shift
    ;;
  --version)
    print_version
    exit 0
    ;;
  --)
    shift
    break
    ;;
  *)
    echo "Internal Error: option processing error: $1" 1>&2
    exit 1
    ;;
  esac
done

if $daily && $monthly; then
  echo "Error: Both daily (-d) and monthly (-m) were specified." 1>&2
  exit 1
fi

if ! $daily && ! $monthly; then
  echo "Error: Neither daily (-d) nor monthly (-m) were specified." 1>&2
  exit 1
fi

$verbose && echo "Processing..."

if $daily; then
  echo "Doing daily stuff..."
fi

if $monthly; then
  echo "Doing monthly stuff..."
fi

exit 0
